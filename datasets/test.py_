import pandas as pd
import numpy as np
import os, sys
import pickle
import io

# Get dataset
def get_dataset(folderName, datFile):
    '''
    Extract train and test datasets from designated location
    '''
    current_dir = os.getcwd()
    datasets_dir = os.path.join(
        current_dir, folderName, datFile
    ) 

    with open(datasets_dir, mode='r') as file:
        dataset_data = file.read()

    df = pd.read_csv(io.StringIO(dataset_data), sep=' ',index_col=0)
    
    # Convert dataframe to float type
    df = df.astype(float)
    df = df.applymap('{:.1f}'.format)

    return df

# === === === ===
# Dataset dictionary
dataset_mapping = {
    'std': 
    {
        'folder': 'Datasets_SD',
        'test_file': 'TestDataset_SD.dat',
        'train_file': 'TrainDataset_SD.dat',
        'arm_file': 'NewArmDataset_SD.dat',
        'leg_file': 'NewLegDataset_SD.dat'
    },  
    'liaw': 
    {
        'folder': 'Datasets_Liaw',
        'test_file': 'TestDataset_Liaw.dat',
        'train_file': 'TrainDataset_Liaw.dat',
        'arm_file': 'NewArmDataset_Liaw.dat',
        'leg_file': 'NewLegDataset_Liaw.dat'        
    }
}

variables = [
    'Trunk',
    'Leg',
    'Arm',
    'Speed',
    'Fluency',
    'Stability'
]

# y test and y train
yTest = pd.read_csv('ytest.csv',index_col=0)
yTrainCollection = pd.read_csv('ytrain.csv',index_col=0)

options = ['std', 'liaw']

# X test
for option in options:
    if option in dataset_mapping:
        dataset_info = dataset_mapping[option]
        XtestDF = get_dataset(dataset_info['folder'], dataset_info['test_file'])
        Xtest = np.array(XtestDF, np.float32)

        # Pickle directory
        pickle_dir = os.path.join(os.getcwd(), 'SK_models')

        # Seperate df into 6 variables
        df = {}
        for variable in variables:
            df[variable] = pd.DataFrame(yTest[variable])

            # Target data
            if variable == 'Arm':
                targetFile = "arm_file"
            
            elif variable == 'Leg':
                targetFile = "leg_file"
            
            else:
                targetFile = "train_file"

            # X train
            XtrainDF = get_dataset(dataset_info['folder'], dataset_info[targetFile])

            # Trim arm and leg columns
            if (variable == "Leg") or (variable == "Arm"):
                common_columns = set(XtestDF.columns).intersection(XtrainDF.columns)
                XtestDF = XtestDF[list(common_columns)]

            methods = ['borda', 'mean', 'reciprocal']

            for method in methods:
                # To access pickle models
                model_filename = f'TR_{variable}_{method}.pickle'
                model_path = os.path.join(pickle_dir, f'SK_Datasets_Liaw_TR/{model_filename}')
                
                # To access feature list
                feature_list_base_path = os.path.join(os.getcwd(), 'feature_list', 'ensemble')

                file_name = f'{method}_{option}_{variable}.csv'
                file_path = os.path.join(feature_list_base_path, method, file_name)
                selected_features_df = pd.read_csv(file_path, index_col=0)

            # Load the pickle model
            with open(model_path, 'rb') as model_file:
                model = pickle.load(model_file)

            # Sort features based on scores in descending order and select top 100 features
            num_features_to_keep = int(0.1 * len(yTrainCollection[variable]))
            sorted_features = selected_features_df['x'].sort_values(ascending=False)
            top_features = sorted_features.index[:num_features_to_keep]
            
            # Reducing dataset based on selected features
            XtestDF_reduced = XtestDF[top_features]
            
            # Calculate yPred values
            yPred = model.predict(XtestDF_reduced)

            # Add yPred values to the DataFrame
            df_name = f'{variable}_{method}'  # DataFrame column name
            df[df_name] = pd.DataFrame(yPred, index=yTest.index)

            # Print the resulting DataFrame
            print(df[df_name])

    else:
        print('error')